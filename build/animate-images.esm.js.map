{"version":3,"file":"animate-images.esm.js","sources":["../src/utils.js","../src/settings.js","../src/ImagePreloader.js","../src/Render.js","../src/Animation.js","../src/Poster.js","../src/DragInput.js","../src/AnimateImages.js"],"sourcesContent":["export function normalizeFrameNumber(frameNumber, totalImages){\r\n    frameNumber = Math.floor(frameNumber);\r\n    if (frameNumber <= 0) {\r\n        return 1;\r\n    } else if (frameNumber > totalImages) {\r\n        return totalImages;\r\n    }\r\n    return frameNumber;\r\n}\r\n\r\nexport function calculateFullAnimationDuration(imagesNumber, fps){\r\n    return imagesNumber / fps  * 1000;\r\n}\r\n\r\nexport function uppercaseFirstChar(word){\r\n    return word.charAt(0).toUpperCase() + word.slice(1);\r\n}","export function validateInitParameters(node, options){\r\n    if ( !(node instanceof HTMLCanvasElement) ) { // Check dom node\r\n        throw new TypeError('node is required and should be canvas element');\r\n    }\r\n    if (!options.images || !Array.isArray(options.images) || options.images.length <= 1 ) { // Check images list\r\n        throw new TypeError('options.images is required and must be an array with more than 1 element');\r\n    }\r\n    // if ( (\"preload\" in options) && // Check preload type\r\n    //     (\r\n    //         !(typeof options.preload  === \"string\")\r\n    //         || !(options.preload === \"all\" || options.preload === \"none\" || options.preload === \"partial\")\r\n    //     )\r\n    // ) {\r\n    //     throw new TypeError('options.preload must be one of these: all, none, partial');\r\n    // }\r\n    // if ( (\"preloadNumber\" in options)\r\n    //     && !( Number.isInteger(Number.parseInt(options.preloadNumber)) && Number.parseInt(options.preloadNumber) >= 0 )\r\n    // ) {\r\n    //     throw new TypeError('options.preloadNumber must be number >= 0');\r\n    // }\r\n    if ('preloadNumber' in options) options.preloadNumber = Number.parseInt(options.preloadNumber); // Allow number as a string\r\n    if (\"fillMode\" in options && !['cover', 'contain'].includes(options.fillMode))  delete options['fillMode'];\r\n    if ('dragModifier' in options) options.dragModifier = Math.abs(+options.dragModifier);\r\n}\r\n\r\nexport const defaultSettings = {\r\n    preload: \"all\",\r\n    preloadNumber: 0,\r\n    poster: false,\r\n    fps: 30,\r\n    loop: false,\r\n    autoplay: false,\r\n    reverse: false,\r\n    ratio: undefined,\r\n    fillMode: \"cover\",\r\n\r\n    draggable: false,\r\n    inversion: false,\r\n    dragModifier: 1,\r\n    touchScrollMode: \"pageScrollTimer\",\r\n    pageScrollTimerDelay: 1500,\r\n    responsiveAspect: \"width\",\r\n\r\n    fastPreview: false,\r\n\r\n    onFastPreloadFinished: noOp,\r\n    onPreloadFinished: noOp,\r\n    onPosterLoaded: noOp,\r\n    onAnimationEnd: noOp,\r\n    onBeforeFrame: noOp,\r\n    onAfterFrame: noOp,\r\n}\r\n\r\nexport const eventPrefix = \"animate-images:\";\r\n\r\nfunction noOp(){}\r\n","import { eventPrefix } from \"./settings\";\r\n\r\nexport default class ImagePreloader{\r\n\r\n    constructor( {settings, data, updateImagesCount, getFramesLeft} ) {\r\n        this._settings = settings;\r\n        this._data = data;\r\n        this._updateImagesCount = updateImagesCount;\r\n        this._getFramesLeft = getFramesLeft;\r\n\r\n        // Public\r\n        this._isPreloadFinished = false;// onload on all the images\r\n        this._isFastPreloadFinished = false;// images from fastPreload mode\r\n        this._isAnyPreloadFinished = false;\r\n        this._isLoadedWithErrors = false;\r\n\r\n        // Internal\r\n        this._preloadOffset = 0;// images already in queue\r\n        this._preloadedCount = 0;// count of loaded images\r\n        this._tempImagesArray = []; // store images before they are fully loaded\r\n        this._failedImages = [];\r\n        this._currentMode = \"default\";// \"default\" or \"fast\"\r\n        this._modes = {\r\n            default: {\r\n                images: this._settings.images,\r\n                event: eventPrefix + \"preload-finished\",\r\n                callback: this._settings.onPreloadFinished,\r\n            },\r\n            fast: {\r\n                images: this._settings?.fastPreview.images,\r\n                event: eventPrefix + \"fast-preload-finished\",\r\n                callback: this._settings.onFastPreloadFinished,\r\n            }\r\n        }\r\n\r\n        // set mode if fast preview\r\n        if (this._settings.fastPreview) {\r\n            if ( !this._settings.fastPreview.images ) {\r\n                throw new TypeError('fastPreview.images is required when fastPreview is enabled');\r\n            }\r\n            this._currentMode = \"fast\";\r\n            this._data.totalImages = this._settings.fastPreview.images.length;\r\n        }\r\n        this._totalImages = this._data.totalImages; // get initial value for the first time, update when fast => default mode\r\n    }\r\n\r\n    /**\r\n     * Add number of images to loading queue\r\n     * @param {number} [preloadNumber] - number of images to load\r\n     */\r\n    _startLoading(preloadNumber){\r\n        if (this._isPreloadFinished) return;\r\n        if ( !preloadNumber ) preloadNumber = this._totalImages;\r\n        preloadNumber = Math.round(preloadNumber);\r\n\r\n        // if too many, load just the rest\r\n        const unloadedCount = this._totalImages - this._preloadOffset;\r\n        if (preloadNumber > unloadedCount){\r\n            preloadNumber = unloadedCount;\r\n        }\r\n\r\n        // true when all the images are in queue but not loaded yet, (unloadedCount = preloadNumber = 0)\r\n        if (preloadNumber <= 0) return;\r\n\r\n        //console.log(`start loop, preloadNumber=${preloadNumber}, offset=${this._preloadOffset}`);\r\n        for (let i = this._preloadOffset; i < (preloadNumber + this._preloadOffset); i++){\r\n            let img = new Image();\r\n            img.onload = img.onerror = this.#onImageLoad.bind(this);\r\n            img.src = this._modes[this._currentMode].images[i]\r\n            this._tempImagesArray[i] = img;\r\n        }\r\n        this._preloadOffset = this._preloadOffset + preloadNumber;\r\n    }\r\n\r\n    #onImageLoad(e){\r\n        this._preloadedCount++;\r\n        const progress = Math.floor((this._preloadedCount/this._totalImages) * 1000) / 1000 ;\r\n        this._data.canvas.element.dispatchEvent( new CustomEvent(eventPrefix + 'loading-progress', {detail: {progress}}) );\r\n        if (e.type === \"error\") {\r\n            this._isLoadedWithErrors = true;\r\n            const path = e.path || (e.composedPath && e.composedPath());\r\n            this._failedImages.push(path[0]);\r\n            this._data.canvas.element.dispatchEvent( new Event(eventPrefix + 'loading-error') );\r\n        }\r\n        if (this._preloadedCount >= this._totalImages) {\r\n            if ( this._isLoadedWithErrors ) this.#clearImagesArray();\r\n            this.#afterPreloadFinishes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove failed images from array\r\n     */\r\n    #clearImagesArray(){\r\n        if ( this._failedImages.length < 1) return;\r\n        this._tempImagesArray = this._tempImagesArray.filter((el) => {\r\n            return !this._failedImages.includes(el);\r\n        });\r\n    }\r\n\r\n    #afterPreloadFinishes(){ // check what to do next\r\n        if (this._currentMode === \"default\"){\r\n            this._isPreloadFinished = true;\r\n        } else {\r\n            this._isFastPreloadFinished = true;\r\n        }\r\n        this._isAnyPreloadFinished = true; // variable for checks from main plugin\r\n        this._data.loadedImagesArray = [...this._tempImagesArray];\r\n        this._data.totalImages = this._tempImagesArray.length;\r\n        this._updateImagesCount();\r\n\r\n        // we should call deferredAction and callback after \"setFrame\" inside next \"if\", because setFrame will replace\r\n        // these actions, so save current mode before it will be changed inside \"if\", and use for  deferredAction and callback\r\n        const savedMode = this._currentMode;\r\n        const plugin = this._data.pluginApi;\r\n        // code below executes only if fastPreview is set\r\n        if ( this._currentMode === \"fast\" ) { // fast preload has ended\r\n            this._currentMode = \"default\";\r\n            this._tempImagesArray = [];\r\n            this._preloadOffset = this._preloadedCount = 0;\r\n            this._totalImages = this._settings.images.length; // update for default preload mode\r\n            // start preload full list if we have action, that started after fast preload end\r\n            if ( this._data.deferredAction ) this._startLoading();\r\n        } else if ( this._currentMode === \"default\" && this._settings.fastPreview ) { // default preload has ended (only after fast),\r\n            // replace small sequence with full and change frame\r\n            if (this._settings?.fastPreview.fpsAfter) plugin.setOption(\"fps\", this._settings?.fastPreview.fpsAfter)\r\n            const wasAnimating = plugin.isAnimating();\r\n            const framesAreInQueue = typeof this._getFramesLeft() !== 'undefined'; // true if playTo or playFrames is active\r\n            const matchFrame = this._settings?.fastPreview.matchFrame;\r\n            plugin.setFrame( matchFrame ? matchFrame(this._data.currentFrame) : 1 );\r\n            // play() => continue, playTo() or playFrames() => stop, because it is impossible\r\n            // to calculate new target frame from _framesLeftToPlay\r\n            //https://github.com/its2easy/animate-images/issues/7#issuecomment-1210624687\r\n            if ( wasAnimating && !framesAreInQueue ) plugin.play();\r\n        }\r\n\r\n        // actions and callbacks\r\n        if (this._data.deferredAction) {\r\n            this._data.deferredAction();\r\n            // clear to prevent from being called twice when action was queued before the end of fastPreview preload\r\n            this._data.deferredAction = null;\r\n        }\r\n        this._data.canvas.element.dispatchEvent( new Event(this._modes[savedMode].event) );\r\n        this._modes[savedMode].callback(plugin);\r\n\r\n    }\r\n\r\n    // Case when fast preload had ended, but we don't have deferred action, because action started with preview frames,\r\n    // this is possible only with preload=\"all\"; or with any preload after plugin.preloadImages() before any action,\r\n    // and we have to start full preload here.\r\n    // This function is called only after frame change was requested.\r\n    _maybePreloadAll(){\r\n        if (this._settings.fastPreview && !this._isPreloadFinished) this._startLoading();\r\n    }\r\n\r\n}\r\n","export default class Render{\r\n\r\n    constructor( {settings, data} ) {\r\n        this._settings = settings;\r\n        this._data = data;\r\n        /** @type CanvasRenderingContext2D */\r\n        this._context = this._data.canvas.element.getContext(\"2d\");\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLImageElement} imageObject - image object\r\n     */\r\n    _drawFrame(imageObject){\r\n        //this._context.imageSmoothingEnabled = false; // may reduce blurriness, but could make the image worse (resets to true  after resize)\r\n\r\n        let sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight;\r\n        if (this._settings.fillMode === \"cover\") {\r\n            ( {sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight} = this.#getDrawImageCoverProps(imageObject) )\r\n        } else if ( this._settings.fillMode === \"contain\" ) {\r\n            ( {sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight} = this.#getDrawImageContainProps(imageObject) )\r\n        }\r\n\r\n        //console.log(`sx= ${sx}, sy=${sy}, sWidth=${sWidth}, sHeight=${sHeight}, dx=${dx}, dy=${dy}, dWidth=${dWidth}, dHeight=${dHeight}`);\r\n        const canvasEl = this._data.canvas.element;\r\n        this._settings.onBeforeFrame(this._data.pluginApi,\r\n            {context: this._context, width: canvasEl.width, height: canvasEl.height});\r\n\r\n        this._context.drawImage(imageObject, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\r\n\r\n        this._settings.onAfterFrame(this._data.pluginApi,\r\n            {context: this._context, width: canvasEl.width, height: canvasEl.height});\r\n    }\r\n\r\n    _clearCanvas(){\r\n        const canvasEl = this._data.canvas.element;\r\n        this._context.clearRect(0, 0, canvasEl.width, canvasEl.height);\r\n    }\r\n\r\n    #getDrawImageCoverProps(image){\r\n        //https://stackoverflow.com/questions/21961839/simulation-background-size-cover-in-canvas\r\n        let dx = 0,\r\n            dy = 0,\r\n            canvasWidth = this._data.canvas.element.width,\r\n            canvasHeight = this._data.canvas.element.height,\r\n            imageWidth = image.naturalWidth,\r\n            imageHeight = image.naturalHeight,\r\n            offsetX = 0.5,\r\n            offsetY = 0.5,\r\n            minRatio = Math.min(canvasWidth / imageWidth, canvasHeight / imageHeight),\r\n            newWidth = imageWidth * minRatio,   // new prop. width\r\n            newHeight = imageHeight * minRatio,   // new prop. height\r\n            sx, sy, sWidth, sHeight, ar = 1;\r\n\r\n        // decide which gap to fill\r\n        if (newWidth < canvasWidth) ar = canvasWidth / newWidth;\r\n        if (Math.abs(ar - 1) < 1e-14 && newHeight < canvasHeight) ar = canvasHeight / newHeight;  // updated\r\n        newWidth *= ar;\r\n        newHeight *= ar;\r\n\r\n        // calc source rectangle\r\n        sWidth = imageWidth / (newWidth / canvasWidth);\r\n        sHeight = imageHeight / (newHeight / canvasHeight);\r\n\r\n        sx = (imageWidth - sWidth) * offsetX;\r\n        sy = (imageHeight - sHeight) * offsetY;\r\n\r\n        // make sure source rectangle is valid\r\n        if (sx < 0) sx = 0;\r\n        if (sy < 0) sy = 0;\r\n        if (sWidth > imageWidth) sWidth = imageWidth;\r\n        if (sHeight > imageHeight) sHeight = imageHeight;\r\n\r\n        return { sx, sy, sWidth, sHeight, dx, dy, dWidth: canvasWidth, dHeight: canvasHeight };\r\n    }\r\n    #getDrawImageContainProps(image){\r\n        let canvasWidth = this._data.canvas.element.width,\r\n            canvasHeight = this._data.canvas.element.height,\r\n            imageWidth = image.naturalWidth,\r\n            imageHeight = image.naturalHeight,\r\n            sx = 0,\r\n            sy = 0,\r\n            sWidth = imageWidth,\r\n            sHeight = imageHeight,\r\n            dx,\r\n            dy,\r\n            offsetX = 0.5,\r\n            offsetY = 0.5,\r\n            ratioX = canvasWidth / imageWidth,\r\n            ratioY = canvasHeight / imageHeight,\r\n            minRation = Math.min(ratioX, ratioY),\r\n            newWidth = imageWidth * minRation,\r\n            newHeight = imageHeight * minRation;\r\n\r\n        dx = (canvasWidth - newWidth) * offsetX;\r\n        dy = (canvasHeight - newHeight) * offsetY;\r\n\r\n        return { sx, sy, sWidth, sHeight, dx, dy, dWidth: newWidth, dHeight: newHeight};\r\n    }\r\n}\r\n","import { eventPrefix } from \"./settings\";\r\n\r\nexport default class Animation{\r\n    // Public\r\n    _isAnimating;\r\n    _framesLeftToPlay; // frames from playTo() and playFrames()\r\n\r\n    // Internal\r\n    _lastUpdate; // time from RAF\r\n    _duration; // time of the full animation sequence\r\n    _stopRequested;\r\n    _framesQueue; // save decimal part if deltaFrames is not round, to prevent rounding errors\r\n    _progressThreshold; // >35% mea`ns that there was a long task in callstack\r\n\r\n    constructor( {settings, data, changeFrame} ) {\r\n        this._settings = settings;\r\n        this._data = data;\r\n        this._changeFrame = changeFrame;\r\n\r\n        this._stopRequested = false;\r\n        this._isAnimating = false;\r\n        this._framesQueue = 0;\r\n        this._progressThreshold = 0.35;\r\n\r\n        this._updateDuration();\r\n    }\r\n\r\n    _play(){\r\n        this._isAnimating = true;\r\n         this._stopRequested = false; // fix for the case when stopRequested was set inside getNextFrame that was called outside #animate\r\n        if ( !this._data.isAnyFrameChanged ) { // 1st paint, direct call because 1st frame wasn't drawn\r\n            this._changeFrame(1);\r\n            // subtract 1 manually, because changeFrame is calling not from animate(), but directly\r\n            if ( Number.isFinite(this._framesLeftToPlay) ) this._framesLeftToPlay--; // undefined-- = NaN\r\n        }\r\n\r\n         this._lastUpdate = null;// first 'lastUpdate' should be always set in the first raf of the current animation\r\n        requestAnimationFrame(this.#animate.bind(this));\r\n    }\r\n    _stop(){\r\n        const wasAnimating = this._isAnimating;\r\n        this._isAnimating = false;\r\n        this._framesLeftToPlay = undefined;\r\n        if ( wasAnimating ){ // !!! callbacks and events should be called after all the values are reset\r\n            this._data.canvas.element.dispatchEvent( new Event(eventPrefix + 'animation-end') );\r\n            this._settings.onAnimationEnd(this._data.pluginApi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get next frame number, based on current state and settings\r\n     * @param {Number} deltaFrames -\r\n     * @param {Boolean} reverse\r\n     * @returns {number|*}\r\n     */\r\n    _getNextFrame(deltaFrames, reverse = undefined){\r\n        deltaFrames = Math.floor(deltaFrames); //just to be safe\r\n        // Handle reverse\r\n        if ( reverse === undefined ) reverse = this._settings.reverse;\r\n        let newFrameNumber = reverse ? this._data.currentFrame - deltaFrames : this._data.currentFrame + deltaFrames\r\n\r\n        // Handle loop\r\n        if (this._settings.loop) { // loop and outside of the frames\r\n            if (newFrameNumber <= 0) {\r\n                // for example newFrame = -2, total = 50, newFrame = 50 - abs(-2) = 48\r\n                newFrameNumber = this._data.totalImages - Math.abs(newFrameNumber);\r\n            }\r\n            else if (newFrameNumber > this._data.totalImages) {\r\n                // for example newFrame = 53, total 50, newFrame = newFrame - totalFrames = 53 - 50 = 3\r\n                newFrameNumber = newFrameNumber - this._data.totalImages;\r\n            }\r\n        } else { // no loop and outside of the frames\r\n            if (newFrameNumber <= 0) {\r\n                newFrameNumber = 1;\r\n                this._stopRequested = true;\r\n            }\r\n            else if (newFrameNumber > this._data.totalImages) {\r\n                newFrameNumber = this._data.totalImages;\r\n                 this._stopRequested = true;\r\n            }\r\n        }\r\n        return  newFrameNumber;\r\n    }\r\n\r\n    // RAF callback\r\n    // (chrome) 'timestamp' is timestamp from the moment the RAF callback was queued\r\n    // (firefox) 'timestamp' is timestamp from the moment the RAF callback was called\r\n    // the difference is equal to the time that the main thread was executing after raf callback was queued\r\n    #animate(timestamp){\r\n        if ( !this._isAnimating ) return;\r\n\r\n        // lastUpdate is setting here because the time between play() and #animate() is unpredictable, and\r\n        // lastUpdate = performance.now instead of timestamp because timestamp is unpredictable and depends on the browser.\r\n        // Possible frame change in the first raf will always be skipped, because time <= performance.now\r\n        if ( ! this._lastUpdate)  this._lastUpdate = performance.now();\r\n\r\n        let deltaFrames;\r\n        // Check if there was a long task between this and the last frame, if so move 1 fixed frame and change lastUpdate to now\r\n        // to prevent animation jump. (1,2,3,long task,75,76,77, ... => 1,2,3,long task,4,5,6,...)\r\n        // In this case the duration will be longer\r\n        let isLongTaskBeforeRaf = (Math.abs(timestamp - performance.now()) /  this._duration) >  this._progressThreshold; //chrome check\r\n        let progress = ( timestamp -  this._lastUpdate ) /  this._duration; // e.g. 0.01\r\n        if ( progress >  this._progressThreshold ) isLongTaskBeforeRaf = true; // firefox check\r\n\r\n        if (isLongTaskBeforeRaf) deltaFrames = 1; // raf after long task, just move to the next frame\r\n        else { // normal execution, calculate progress after the last frame change\r\n            if (progress < 0) progress = 0; //it happens sometimes, when raf timestamp is from the past for some reason\r\n            deltaFrames = progress * this._data.totalImages; // Frame change step, e.g. 0.45 or 1.25\r\n            // e.g. progress is 0.8 frames, queue is 0.25 frames, so now deltaFrames is 1.05 frames and we need to update canvas,\r\n            // without this raf intervals will cause cumulative rounding errors, and actual fps will decrease\r\n            deltaFrames = deltaFrames +  this._framesQueue;\r\n        }\r\n\r\n        // calculate next frame only when we want to render\r\n        // if the getNextFrame check was outside, getNextFrame would be called at screen fps rate, not animation fps\r\n        // if screen fps 144 and animation fps 30, getNextFrame is calling now 30/s instead of 144/s.\r\n        // After the last frame, raf is repeating until the next frame calculation,\r\n        // between the last frame drawing and new frame time, reverse or loop could be changed, and animation won't stop\r\n        if ( deltaFrames >= 1) { // Calculate only if we need to update 1 frame or more\r\n            const newLastUpdate = isLongTaskBeforeRaf ? performance.now() : timestamp;\r\n\r\n            this._framesQueue = deltaFrames % 1; // save decimal part for the next RAFs\r\n            deltaFrames = Math.floor(deltaFrames) % this._data.totalImages;\r\n            if ( deltaFrames > this._framesLeftToPlay ) deltaFrames = this._framesLeftToPlay;// case when  animation fps > device fps\r\n            const newFrame = this._getNextFrame( deltaFrames );\r\n            if ( this._stopRequested ) { // animation ended from check in getNextFrame()\r\n                this._data.pluginApi.stop();\r\n                this._stopRequested = false;\r\n                if (this._data.pluginApi.getCurrentFrame() !== newFrame ) this._changeFrame(newFrame); //last frame fix if fps > device fps\r\n            } else { // animation is on\r\n                this._lastUpdate = newLastUpdate;\r\n                this._changeFrame(newFrame);\r\n                if (typeof this._framesLeftToPlay !== 'undefined') {\r\n                    this._framesLeftToPlay = this._framesLeftToPlay - deltaFrames;\r\n                    // if 0 frames left, stop immediately, don't wait for the next frame calculation\r\n                    // because if isAnimating become true, this will be a new animation\r\n                    if ( this._framesLeftToPlay <= 0 ) this._data.pluginApi.stop();\r\n                }\r\n            }\r\n        }\r\n        if ( this._isAnimating ) requestAnimationFrame(this.#animate.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Recalculate animation duration after fps or totalImages change\r\n     */\r\n    _updateDuration(){\r\n         this._duration =  this._data.totalImages / this._settings.fps  * 1000;\r\n    }\r\n}\r\n","import { eventPrefix } from \"./settings\";\r\n\r\nexport default class Poster{\r\n    // Internal\r\n    _imageObject;\r\n    _isPosterLoaded;\r\n\r\n    constructor({settings, data, drawFrame}) {\r\n        this._settings = settings;\r\n        this._data = data;\r\n        this._drawFrame = drawFrame;\r\n\r\n        this._isPosterLoaded = false;\r\n    }\r\n\r\n    /**\r\n     * Start loading poster, then  show if needed\r\n     */\r\n    _loadAndShowPoster(){\r\n        if (this._settings.poster && !this._data.isAnyFrameChanged) {\r\n            this._imageObject = new Image();\r\n            this._imageObject.onload = this._imageObject.onerror = this.#onPosterLoaded.bind(this);\r\n            this._imageObject.src = this._settings.poster;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redraw poster after canvas change if the poster was loaded\r\n     */\r\n    _redrawPoster(){\r\n        if ( this._data.isAnyFrameChanged || !this._isPosterLoaded ) return;\r\n        this.#drawPoster();\r\n    }\r\n\r\n    #onPosterLoaded(e){\r\n        if (e.type === \"error\") return;\r\n        this._isPosterLoaded = true;\r\n        this._data.canvas.element.dispatchEvent( new Event(eventPrefix + 'poster-loaded') );\r\n        this._settings.onPosterLoaded(this._data.pluginApi);\r\n        // show only if there wasn't any frame change from initial\r\n        // if poster loaded after all the images and any action, it won't be shown\r\n        if ( !this._data.isAnyFrameChanged ) {\r\n            this.#drawPoster();\r\n        }\r\n    }\r\n\r\n    #drawPoster(){\r\n        this._drawFrame(this._imageObject);\r\n    }\r\n}\r\n","import { eventPrefix } from \"./settings\";\r\n\r\nexport default class DragInput{\r\n    // Public\r\n    _isSwiping = false;\r\n\r\n    // Internal\r\n    _curX;\r\n    _curY;\r\n    _prevX;\r\n    _prevY;\r\n    _threshold;\r\n    _pixelsCorrection;\r\n    _lastInteractionTime;\r\n    _prevDirection;\r\n\r\n    constructor({ data, settings, changeFrame, getNextFrame }) {\r\n        this._data = data;\r\n        this._settings = settings;\r\n        this._changeFrame = changeFrame;\r\n        this._getNextFrame = getNextFrame;\r\n\r\n        this._SWIPE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'touchstart', 'touchmove', 'touchend', 'touchcancel'];\r\n        this._isSwiping = false;\r\n        this._boundSwipeHandler = this.#swipeHandler.bind(this);\r\n        this._pixelsCorrection = 0;\r\n\r\n        this._updateThreshold();\r\n    }\r\n\r\n    /**\r\n     * Enable rotating by mouse or touch drag\r\n     */\r\n    _enableDrag(){\r\n        this._SWIPE_EVENTS.forEach( (value) => {\r\n            this._data.canvas.element.addEventListener(value, this._boundSwipeHandler);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Disable rotating by mouse or touch drag\r\n     */\r\n    _disableDrag(){\r\n        this._SWIPE_EVENTS.forEach( (value) => {\r\n            this._data.canvas.element.removeEventListener(value, this._boundSwipeHandler);\r\n        })\r\n        // if disabling while swipeMove is running\r\n        document.removeEventListener('mouseup', this._boundSwipeHandler);\r\n        document.removeEventListener('mousemove', this._boundSwipeHandler);\r\n        this._data.canvas.element.style.cursor = null;\r\n    }\r\n\r\n    /**\r\n     * Update one frame threshold in pixels\r\n     * @param newValue\r\n     */\r\n    _updateThreshold(newValue = null){\r\n        if (newValue) {\r\n            this._threshold = newValue;\r\n        }\r\n        else {\r\n            this._threshold = this._data.canvas.element.clientWidth / this._data.totalImages;\r\n        }\r\n    }\r\n\r\n\r\n    #swipeHandler(event) {\r\n        // get current click/touch point\r\n        let touches;\r\n        if ( event.touches !== undefined && event.touches.length ) touches = event.touches;\r\n        this._curX = (touches) ? touches[0].pageX : event.clientX;\r\n        this._curY = (touches) ? touches[0].pageY : event.clientY;\r\n\r\n        switch (event.type){\r\n            case 'mousedown': // start\r\n            case 'touchstart':\r\n                if ( event.type === 'touchstart' && event.cancelable ) {\r\n                    //event.preventDefault();\r\n                    this.#maybeDisableScroll(event);\r\n                }\r\n                document.addEventListener('mouseup', this._boundSwipeHandler); // move outside of the canvas\r\n                document.addEventListener('mousemove', this._boundSwipeHandler);\r\n                this.#swipeStart();\r\n                break;\r\n            case 'mousemove':\r\n            case 'touchmove': //move\r\n                // ignore mousemove without move (to prevent fake \"left\" movement)\r\n                const wasMoved = (this._prevX !== this._curX && this._prevY !== this._curX);\r\n                if ( this._isSwiping && wasMoved) {\r\n                    //if ( event.type === 'touchmove' && event.cancelable) event.preventDefault();\r\n                    this.#swipeMove();\r\n                }\r\n                break;\r\n            case 'mouseup':\r\n            case 'touchend':\r\n            case 'touchcancel': // end\r\n                //if ( (event.type === 'touchend' || event.type === 'touchcancel') && event.cancelable) event.preventDefault();\r\n                if ( this._isSwiping ) {\r\n                    document.removeEventListener('mouseup', this._boundSwipeHandler);\r\n                    document.removeEventListener('mousemove', this._boundSwipeHandler);\r\n                    this.#swipeEnd();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    #swipeStart(){\r\n        const plugin = this._data.pluginApi;\r\n        if ( !(plugin.isFastPreloadFinished() || plugin.isPreloadFinished()) ) return;\r\n        // trigger full load after user interaction after fast preload finished\r\n        if (this._settings.fastPreview && !plugin.isPreloadFinished() && plugin.isFastPreloadFinished()) {\r\n            plugin.preloadImages();\r\n        }\r\n        plugin.stop();\r\n        this._isSwiping = true;\r\n        this._data.canvas.element.style.cursor = 'grabbing';\r\n        this._prevX = this._curX;\r\n        this._prevY = this._curY;\r\n        this._data.canvas.element.dispatchEvent( new CustomEvent(eventPrefix + 'drag-start',\r\n            { detail: {frame: this._data.currentFrame} })\r\n        );\r\n    }\r\n    #swipeMove(){\r\n        const direction = this.#swipeDirection();\r\n        if (this._prevDirection && this._prevDirection !== direction) { // reset after direction change\r\n            this._pixelsCorrection = 0;\r\n        }\r\n        this._prevDirection = direction;\r\n\r\n        const pixelDiffX = Math.abs(this._curX - this._prevX ); // save x diff before update\r\n        const swipeLength = (pixelDiffX + this._pixelsCorrection) * this._settings.dragModifier ;\r\n\r\n        this._prevX = this._curX; // update before any returns\r\n        this._prevY = this._curY; // update Y to prevent wrong angle after many vertical moves\r\n\r\n\r\n        if ( (direction !== 'left' && direction !== 'right') || // Ignore vertical directions\r\n            (swipeLength < this._threshold) ) { // Ignore if less than 1 frame\r\n            this._pixelsCorrection += pixelDiffX; // skip this mousemove, but save horizontal movement\r\n            return;\r\n        }\r\n\r\n\r\n        const progress = swipeLength / this._data.canvas.element.clientWidth; // full width swipe means full length animation\r\n        let deltaFrames = Math.floor(progress * this._data.totalImages);\r\n        deltaFrames = deltaFrames % this._data.totalImages;\r\n        // Add pixels to the next swipeMove if frames equivalent of swipe is not an integer number,\r\n        // e.g one frame is 10px, swipeLength is 13px, we change 1 frame and add 3px to the next swipe,\r\n        // so fullwidth swipe is always rotate sprite for 1 turn (with 'dragModifier' = 1).\r\n        // I divide the whole value by dragModifier because it seems to work as it should\r\n        this._pixelsCorrection = (swipeLength - (this._threshold * deltaFrames)) / this._settings.dragModifier;\r\n        let isReverse = (direction === 'left'); // left means backward (reverse: true)\r\n        if (this._settings.inversion) isReverse = !isReverse;// invert direction\r\n        this._changeFrame(this._getNextFrame( deltaFrames, isReverse )); // left means backward (reverse: true)\r\n        this._data.canvas.element.dispatchEvent( new CustomEvent(eventPrefix + 'drag-change',\r\n            { detail: {\r\n                frame: this._data.currentFrame,\r\n                direction,\r\n            } })\r\n        );\r\n    }\r\n    #swipeEnd(){\r\n        //if ( swipeObject.curX === undefined ) return; // there is no x coord on touch end\r\n        this._curX = this._curY = this._prevX = this._prevY = null;\r\n        this._isSwiping = false;\r\n        this._data.canvas.element.style.cursor = null;\r\n        this._lastInteractionTime = new Date().getTime();\r\n        this._data.canvas.element.dispatchEvent( new CustomEvent(eventPrefix + 'drag-end',\r\n            { detail: {\r\n                frame: this._data.currentFrame,\r\n                direction: this._prevDirection,\r\n            } })\r\n        );\r\n    }\r\n    #swipeDirection(){\r\n        let r, swipeAngle,\r\n            xDist = this._prevX - this._curX,\r\n            yDist = this._prevY - this._curY;\r\n\r\n        // taken from slick.js\r\n        r = Math.atan2(yDist, xDist);\r\n        swipeAngle = Math.round(r * 180 / Math.PI);\r\n        if (swipeAngle < 0) swipeAngle = 360 - Math.abs(swipeAngle);\r\n\r\n        if ( (swipeAngle >= 0 && swipeAngle <= 60) || (swipeAngle <= 360 && swipeAngle >= 300 )) return 'left';\r\n        else if ( swipeAngle >= 120 && swipeAngle <= 240 ) return 'right';\r\n        else if ( swipeAngle >= 241 && swipeAngle <= 299 ) return 'bottom';\r\n        else return 'up';\r\n    }\r\n\r\n    /**\r\n     * Idea from https://github.com/giniedp/spritespin/blob/master/src/plugins/input-drag.ts#L45\r\n     * @param {Event} event\r\n     */\r\n    #maybeDisableScroll(event){\r\n        // always prevent\r\n        if (this._settings.touchScrollMode === \"preventPageScroll\") event.preventDefault();\r\n        // check timer\r\n        if (this._settings.touchScrollMode === \"pageScrollTimer\") {\r\n            const now = new Date().getTime();\r\n            // less time than delay => prevent page scroll\r\n            if (this._lastInteractionTime && (now - this._lastInteractionTime < this._settings.pageScrollTimerDelay) ){\r\n                event.preventDefault();\r\n            } else { // more time than delay or first interaction => clear timer\r\n                this._lastInteractionTime = null;\r\n            }\r\n        }\r\n        // if touchScrollMode=\"allowPageScroll\" => don't prevent scroll\r\n    }\r\n}\r\n","import { normalizeFrameNumber, uppercaseFirstChar } from \"./utils\";\r\nimport { validateInitParameters, defaultSettings } from \"./settings\";\r\nimport ImagePreloader from \"./ImagePreloader\";\r\nimport Render from \"./Render\";\r\nimport Animation from \"./Animation\";\r\nimport Poster from \"./Poster\";\r\nimport DragInput from \"./DragInput\";\r\n\r\n/**\r\n * Animate Images {@link https://github.com/its2easy/animate-images/}\r\n * @example\r\n * let pluginInstance = new AnimateImages(document.querySelector('canvas'), {\r\n *    images: ['img1.jpg', 'img2.jpg', 'img3.jpg'],\r\n *    loop: true,\r\n *    draggable: true,\r\n *    fps: 60,\r\n * });\r\n */\r\nexport default class AnimateImages{\r\n    #settings;\r\n    #data = {\r\n        currentFrame: 1,\r\n        totalImages: null,\r\n        loadedImagesArray: [], // images objects [0 - (images.length-1)]\r\n        deferredAction: null, // call after full preload\r\n        isAnyFrameChanged: false,\r\n        /** @type AnimateImages */\r\n        pluginApi: undefined,\r\n        canvas: {\r\n            element: null,\r\n            ratio: null,\r\n        },\r\n    }\r\n    #boundUpdateCanvasSizes;\r\n    //Classes\r\n    #preloader;\r\n    #render;\r\n    #animation;\r\n    #poster;\r\n    #dragInput;\r\n\r\n    /**\r\n     * Creates plugin instance\r\n     * @param {HTMLCanvasElement} node - canvas element\r\n     * @param {PluginOptions} options\r\n     */\r\n    constructor(node, options){\r\n        validateInitParameters(node, options);\r\n        this.#settings = {...defaultSettings, ...options};\r\n        this.#data.totalImages = this.#settings.images.length;\r\n        this.#data.canvas.element = node;\r\n        this.#data.pluginApi = this;\r\n        this.#boundUpdateCanvasSizes = this.#updateCanvasSizes.bind(this)\r\n        this.#initPlugin();\r\n    }\r\n\r\n    #initPlugin(){\r\n        this.#render = new Render( {settings: this.#settings, data: this.#data} );\r\n        this.#animation = new Animation(\r\n            {settings: this.#settings, data: this.#data, changeFrame:  this.#changeFrame.bind(this)} );\r\n        this.#updateCanvasSizes();\r\n        if ( this.#settings.poster ) this.#setupPoster();\r\n        this.#toggleResizeHandler(true);\r\n        this.#preloader = new ImagePreloader({\r\n            settings: this.#settings,\r\n            data: this.#data,\r\n            updateImagesCount: this.#updateImagesCount.bind(this),\r\n            getFramesLeft: this.#getFramesLeft.bind(this),\r\n        });\r\n        if (this.#settings.preload === 'all' || this.#settings.preload === \"partial\"){\r\n            let preloadNumber = (this.#settings.preload === 'all') ? this.#data.totalImages : this.#settings.preloadNumber;\r\n            if (preloadNumber === 0) preloadNumber = this.#data.totalImages;\r\n            this.#preloader._startLoading(preloadNumber);\r\n        }\r\n        if (this.#settings.autoplay) this.play();\r\n        if ( this.#settings.draggable ) this.#toggleDrag(true);\r\n    }\r\n\r\n    #changeFrame(frameNumber){\r\n        if (frameNumber === this.#data.currentFrame && this.#data.isAnyFrameChanged) return;//skip same frame, except first drawing\r\n        if ( !this.#data.isAnyFrameChanged ) this.#data.isAnyFrameChanged = true;\r\n\r\n        this.#animateCanvas(frameNumber);\r\n        this.#data.currentFrame = frameNumber;\r\n    }\r\n\r\n    #animateCanvas(frameNumber){\r\n        this.#render._clearCanvas();\r\n        this.#render._drawFrame( this.#data.loadedImagesArray[frameNumber - 1] );\r\n    }\r\n\r\n\r\n    #updateCanvasSizes(){\r\n        const canvas = this.#data.canvas;\r\n        /**\r\n         * +++RATIO SECTION+++\r\n         * If no options.ratio, inline canvas width/height will be used (2:1 if not set)\r\n         * Real canvas size is controlled by CSS, inner size will be set based on CSS width and ratio (height should be \"auto\")\r\n         * If height if fixed in CSS, ratio can't be used and inner height will be equal to CSS-defined height\r\n         */\r\n        if ( this.#settings.ratio ) canvas.ratio = this.#settings.ratio;\r\n        // Initial ratio shouldn't be changed. Ratio will only modified after setOption(\"ratio\", newRatio),\r\n        // or after setting css height and plugin.updateCanvas()\r\n        else if ( !canvas.ratio ) {\r\n            canvas.ratio = canvas.element.width / canvas.element.height;\r\n        }\r\n\r\n\r\n        // +++SIZE SECTION+++\r\n        // mainSide is the side from responsiveAspect, it should be controlled by CSS, secondarySide value will be\r\n        // controlled by script\r\n        const dpr = (window.devicePixelRatio).toFixed(2) || 1; // sometimes dpr is like 2.00000000234\r\n        let mainSide = this.#settings.responsiveAspect;// width or height\r\n        let clientMainSide =  \"client\" + uppercaseFirstChar(mainSide); // clientWidth or clientHeight\r\n        let secondarySide = (mainSide === \"width\") ? \"height\" : \"width\";\r\n        let clientSecondarySide = \"client\" + uppercaseFirstChar(secondarySide);// clientWidth or clientHeight\r\n\r\n        // changing width and height won't change real clientWidth and clientHeight if size is fixed by CSS\r\n        const initialClientMainSide = canvas.element[clientMainSide];\r\n        canvas.element[mainSide] = canvas.element[clientMainSide] * dpr;\r\n\r\n        // !!! ONLY if dpr != 1 and canvas css mainSide was not defined => changed width will change clientWidth\r\n        // so we need to recalculate width based on new clientWidth\r\n        if (initialClientMainSide !== canvas.element[clientMainSide]) {\r\n            canvas.element[mainSide] = canvas.element[clientMainSide] * dpr;\r\n        }\r\n\r\n        let rawNewValue = (mainSide === \"width\") ? canvas.element.clientWidth / canvas.ratio : canvas.element.clientHeight * canvas.ratio;\r\n        canvas.element[secondarySide] = Math.round(rawNewValue) * dpr; // \"round\" for partial fix to rounding pixels error\r\n\r\n\r\n        // +++CORRECTION SECTION+++\r\n        const secondaryValueDifference = Math.abs(canvas.element[secondarySide] - canvas.element[clientSecondarySide] * dpr);// diff in pixels\r\n        // previously I compared with 1px to check subpixel errors, but error is somehow related to dpr, so we compare with \"1px * dpr\" or just \"dpr\"\r\n        if ( secondaryValueDifference > dpr) { // if secondarySide is locked by CSS\r\n            let newRatio = canvas.element.clientWidth / canvas.element.clientHeight; // ratio from \"real\" canvas element\r\n            // <1% change => calculation error; >1% change => secondarySide size is locked with css\r\n            if ( Math.abs(canvas.ratio - newRatio) / canvas.ratio > 0.01 ) {\r\n                canvas.element[secondarySide] = canvas.element[clientSecondarySide] * dpr;\r\n                canvas.ratio = newRatio;\r\n            } else { // small diff between inner and real values, adjust to prevent errors accumulation\r\n                canvas.element[secondarySide] = (mainSide === \"width\") ? canvas.element.width / canvas.ratio : canvas.element.height * canvas.ratio;\r\n            }\r\n        } else if (secondaryValueDifference > 0 && secondaryValueDifference <= dpr ) { // rare case, pixels are fractional\r\n            // so just update inner canvas size baser on main side and ratio\r\n            canvas.element[secondarySide] = (mainSide === \"width\") ? canvas.element.width / canvas.ratio : canvas.element.height * canvas.ratio;\r\n        }\r\n\r\n        if ( this.#dragInput ) this.#dragInput._updateThreshold()\r\n        this.#maybeRedrawFrame(); // canvas is clear after resize\r\n    }\r\n\r\n    #updateImagesCount(){\r\n        if ( this.#dragInput ) this.#dragInput._updateThreshold();\r\n        this.#animation._updateDuration();\r\n    }\r\n    #maybeRedrawFrame(){\r\n        if ( this.#data.isAnyFrameChanged ) { // frames were drawn\r\n            this.#animateCanvas(this.#data.currentFrame);\r\n        } else if ( this.#poster ) { // poster exists\r\n            this.#poster._redrawPoster();\r\n        }\r\n        // don't redraw in initial state, or if poster onLoad is not finished yet\r\n    }\r\n\r\n    #toggleDrag(enable){\r\n        if (enable) {\r\n            if ( !this.#dragInput ) this.#dragInput = new DragInput({\r\n                data: this.#data,\r\n                settings: this.#settings,\r\n                changeFrame: this.#changeFrame.bind(this),\r\n                getNextFrame: this.#animation._getNextFrame.bind(this.#animation)\r\n            });\r\n            this.#dragInput._enableDrag();\r\n        } else {\r\n            if (this.#dragInput) this.#dragInput._disableDrag();\r\n        }\r\n    }\r\n\r\n    #setupPoster(){\r\n        if (!this.#poster) this.#poster = new Poster(\r\n            {\r\n                settings: this.#settings,\r\n                data: this.#data,\r\n                drawFrame: this.#render._drawFrame.bind(this.#render)\r\n            });\r\n        this.#poster._loadAndShowPoster();\r\n    }\r\n\r\n    #toggleResizeHandler(add = true) {\r\n        if ( add ) window.addEventListener(\"resize\", this.#boundUpdateCanvasSizes);\r\n        else window.removeEventListener(\"resize\", this.#boundUpdateCanvasSizes);\r\n    }\r\n\r\n    #getFramesLeft(){\r\n        return this.#animation._framesLeftToPlay;\r\n    }\r\n\r\n    // Pubic API\r\n\r\n    /**\r\n     * Start animation\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    play(){\r\n        if ( this.#animation._isAnimating ) return this;\r\n        if ( this.#preloader._isAnyPreloadFinished ) {\r\n            this.#animation._play();\r\n            this.#preloader._maybePreloadAll();\r\n        } else {\r\n            this.#data.deferredAction = this.play.bind(this);\r\n            this.#preloader._startLoading();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Stop animation\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    stop(){\r\n        this.#animation._stop();\r\n        return this;\r\n    }\r\n    /**\r\n     * Toggle between start and stop\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    toggle(){\r\n        if ( !this.#animation._isAnimating ) this.play();\r\n        else this.stop();\r\n        return this;\r\n    }\r\n    /**\r\n     * Show next frame\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    next(){\r\n        if ( this.#preloader._isAnyPreloadFinished ) {\r\n            this.stop();\r\n            this.#changeFrame( this.#animation._getNextFrame(1) );\r\n            this.#preloader._maybePreloadAll();\r\n        } else {\r\n            this.#data.deferredAction = this.next.bind(this);\r\n            this.#preloader._startLoading();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Show previous frame\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    prev(){\r\n        if ( this.#preloader._isAnyPreloadFinished ) {\r\n            this.stop();\r\n            this.#changeFrame( this.#animation._getNextFrame(1, !this.#settings.reverse) );\r\n            this.#preloader._maybePreloadAll();\r\n        } else {\r\n            this.#data.deferredAction = this.prev.bind(this);\r\n            this.#preloader._startLoading();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Show a frame with a specified number (without animation)\r\n     * @param {number} frameNumber - Number of the frame to show\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    setFrame(frameNumber){\r\n        if ( this.#preloader._isAnyPreloadFinished ) {\r\n            this.stop();\r\n            this.#changeFrame(normalizeFrameNumber(frameNumber, this.#data.totalImages));\r\n            this.#preloader._maybePreloadAll();\r\n        } else {\r\n            this.#data.deferredAction = this.setFrame.bind(this, frameNumber);\r\n            this.#preloader._startLoading();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Start animation, that plays until the specified frame number\r\n     * @param {number} frameNumber - Target frame number\r\n     * @param {Object} [options] - Options\r\n     * @param {boolean} [options.shortestPath=false] - If set to true and loop enabled, will use the shortest path\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    playTo(frameNumber, options){\r\n        frameNumber = normalizeFrameNumber(frameNumber, this.#data.totalImages);\r\n\r\n        const innerPathDistance = Math.abs(frameNumber - this.#data.currentFrame), // not crossing edge frames\r\n            outerPathDistance = this.#data.totalImages - innerPathDistance, // crossing edges frames\r\n            shouldUseOuterPath = this.#settings.loop && options?.shortestPath && (outerPathDistance < innerPathDistance);\r\n\r\n        if ( !shouldUseOuterPath ) { // Inner path (default)\r\n            // long conditions to make them more readable\r\n            if (frameNumber > this.#data.currentFrame) this.setReverse(false); // move forward\r\n            else this.setReverse(true); // move backward\r\n        } else { // Outer path\r\n            if (frameNumber < this.#data.currentFrame) this.setReverse(false); // move forward\r\n            else this.setReverse(true); // move backward\r\n        }\r\n\r\n        return this.playFrames( (shouldUseOuterPath) ? outerPathDistance : innerPathDistance );\r\n    }\r\n    /**\r\n     * Start animation in the current direction with the specified number of frames in the queue\r\n     * @param {number} [numberOfFrames=0] - Number of frames to play\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    playFrames(numberOfFrames = 0){\r\n        if ( this.#preloader._isAnyPreloadFinished ) {\r\n            numberOfFrames = Math.floor(numberOfFrames);\r\n            if (numberOfFrames < 0) { // first frame should be rendered to replace poster or transparent bg, so allow 0 for the first time\r\n                return this.stop(); //empty animation, stop() to trigger events and callbacks\r\n            }\r\n\r\n            // if this is the 1st animation, we should add 1 frame to the queue to draw the 1st initial frame\r\n            // because 1st frame is not drawn by default (1 frame will replace poster or transparent bg)\r\n            if (!this.#data.isAnyFrameChanged) numberOfFrames += 1;\r\n            if (numberOfFrames <= 0) { // with playFrames(0) before any actions numberOfFrames=1, after any frame change numberOfFrames=0\r\n                return this.stop(); //empty animation\r\n            }\r\n\r\n            this.#animation._framesLeftToPlay = numberOfFrames;\r\n            this.play();\r\n            this.#preloader._maybePreloadAll();\r\n        } else {\r\n            this.#data.deferredAction = this.playFrames.bind(this, numberOfFrames);\r\n            this.#preloader._startLoading();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Change the direction of the animation. Alias to <b>setOption('reverse', true)</b>\r\n     * @param {boolean} [reverse=true] - true for backward animation, false for forward, default \"true\"\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    setReverse(reverse = true){\r\n        this.#settings.reverse = !!reverse;\r\n        return this;\r\n    }\r\n    /**\r\n     * Get current reverse option. Alias to <b>getOption('reverse')</b>\r\n     * @returns {boolean} - reverse or not\r\n     */\r\n    getReverse() { return this.#settings.reverse; }\r\n    /**\r\n     * Change the direction of the animation. It does the opposite effect of <b>setReverse()</b>\r\n     * @param {boolean} [forward=true] - true for forward animation, false for backward, default \"true\"\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    setForward(forward = true){\r\n        this.#settings.reverse = !forward;\r\n        return this;\r\n    }\r\n    /**\r\n     * Start preload specified number of images, can be called multiple times.\r\n     * If all the images are already loaded, then nothing will happen\r\n     * @param {number} number - Number of images to load. If not specified, all remaining images will be loaded.\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    preloadImages(number= undefined){\r\n        number = number ?? this.#settings.images.length;\r\n        this.#preloader._startLoading(number);\r\n        return this;\r\n    }\r\n    /**\r\n     * Calculate new canvas dimensions. Should be called after the canvas size was changed manually\r\n     * Called automatically after page resize\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    updateCanvas(){\r\n        this.#updateCanvasSizes();\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns option value\r\n     * @param {string} option - Option name. All options are allowed\r\n     * @returns {*} - Current option value\r\n     */\r\n    getOption(option){\r\n        if ( option in this.#settings ) {\r\n            return this.#settings[option];\r\n        } else {\r\n            console.warn(`${option} is not a valid option`);\r\n        }\r\n    }\r\n    /**\r\n     * Set new option value\r\n     * @param {string} option - Option name. Allowed options: fps, loop, reverse, inversion, ratio, fillMode, draggable, dragModifier,\r\n     * touchScrollMode, pageScrollTimerDelay, onPreloadFinished, onPosterLoaded, onAnimationEnd, onBeforeFrame, onAfterFrame\r\n     * @param {*} value - New value\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    setOption(option, value) {\r\n        const allowedOptions = ['fps', 'loop', 'reverse', 'inversion', 'ratio', 'fillMode', 'draggable', 'dragModifier', 'touchScrollMode',\r\n            'pageScrollTimerDelay', 'onPreloadFinished', 'onFastPreloadFinished', 'onPosterLoaded', 'onAnimationEnd', 'onBeforeFrame', 'onAfterFrame'];\r\n        if (allowedOptions.includes(option)) {\r\n           this.#settings[option] = value;\r\n           if (option === 'fps') this.#animation._updateDuration();\r\n           if (option === 'ratio') this.#updateCanvasSizes();\r\n           if (option === 'fillMode') this.#updateCanvasSizes();\r\n           if (option === 'draggable') this.#toggleDrag(value);\r\n           if (option === 'dragModifier') this.#settings.dragModifier = Math.abs(+value);\r\n        } else {\r\n            console.warn(`${option} is not allowed in setOption`);\r\n        }\r\n        return this;\r\n    }\r\n    /** @returns {number} - current frame number */\r\n    getCurrentFrame() { return this.#data.currentFrame }\r\n    /** @returns {number} - total frames (considering loading errors) */\r\n    getTotalImages() { return this.#data.totalImages }\r\n    /** @returns {number} - current canvas ratio */\r\n    getRatio() { return this.#data.canvas.ratio }\r\n    /** @returns {boolean} - animating or not */\r\n    isAnimating() { return this.#animation._isAnimating }\r\n    /** @returns {boolean} - returns true if a drag action is in progress */\r\n    isDragging() {\r\n        if ( this.#dragInput ) return this.#dragInput._isSwiping;\r\n        return false\r\n    }\r\n    /** @returns {boolean} - is preload finished */\r\n    isPreloadFinished() { return this.#preloader._isPreloadFinished }\r\n    /** @returns {boolean} - is fast preview mode preload finished */\r\n    isFastPreloadFinished() { return this.#preloader._isFastPreloadFinished }\r\n    /** @returns {boolean} - is loaded with errors */\r\n    isLoadedWithErrors() { return this.#preloader._isLoadedWithErrors }\r\n\r\n    /**\r\n     * Stop the animation and return to the first frame\r\n     * @returns {AnimateImages} - plugin instance\r\n     */\r\n    reset(){\r\n        if ( this.#preloader._isAnyPreloadFinished ) {\r\n            this.stop();\r\n            this.#changeFrame(normalizeFrameNumber(1, this.#data.totalImages));\r\n            this.#preloader._maybePreloadAll();\r\n        } else {\r\n            this.#data.deferredAction = this.reset.bind(this);\r\n            this.#preloader._startLoading();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Stop animation, remove event listeners and clear the canvas. Method doesn't remove canvas element from the DOM\r\n     */\r\n    destroy(){\r\n        this.stop();\r\n        this.#render._clearCanvas();\r\n        this.#toggleDrag(false);\r\n        this.#toggleResizeHandler(false);\r\n    }\r\n}\r\n/**\r\n * NOTE\r\n * All internal classes have public methods and properties start with _, that's for terser plugin that can mangle internal names\r\n * by regexp. It's reducing size by about 20%. Private (#) properties are not used in internal classes because babel use wrapper\r\n * functions for these properties, which increases the size even though private names are minified\r\n */\r\n\r\n/**\r\n * @typedef {Object} PluginOptions\r\n * @property {Array<string>} images - Array with images URLs (required)\r\n * @property {'all'|'partial'|'none'} [preload=\"all\"] - Preload mode (\"all\", \"none\", \"partial\")\r\n * @property {number} [preloadNumber=0] - Number of preloaded images when <b>preload: \"partial\"</b>, 0 for all\r\n * @property {string} [poster] - Url of a poster image, to show before load\r\n * @property {number} [fps=30] - FPS when playing. Determines the duration of the animation (for example 90 images and 60\r\n * fps = 1.5s, 90 images and 30fps = 3s)\r\n * @property {boolean} [loop=false] - Loop the animation\r\n * @property {boolean} [autoplay=false] - Autoplay\r\n * @property {boolean} [reverse=false] - Reverse direction\r\n * reverse means forward or backward, and inversion determines which direction is forward. Affects animation and drag\r\n * @property {number} [ratio] - Canvas width/height ratio, it has higher priority than inline canvas width and height\r\n * @property {'cover'|'contain'} [fillMode=\"cover\"] - Fill mode to use if canvas and image aspect ratios are different\r\n * (\"cover\" or \"contain\")\r\n * @property {boolean} [draggable=false] - Draggable by mouse or touch\r\n * @property {boolean} [inversion=false] - Inversion changes drag direction\r\n * @property {number} [dragModifier=1] - Sensitivity factor for user interaction. Only positive numbers are allowed\r\n * @property {'pageScrollTimer' | 'preventPageScroll' | 'allowPageScroll'} [touchScrollMode = \"pageScrollTimer\"] - Page\r\n * scroll behavior with touch events (preventPageScroll,allowPageScroll, pageScrollTimer)\r\n * @property {number} [pageScrollTimerDelay=1500] - Time in ms when touch scroll will be disabled during interaction\r\n * if <b>touchScrollMode: \"pageScrollTimer\"<b>\r\n * @property {'width'|'height'} [responsiveAspect=\"width\"] - Which side will be responsive (controlled by css)\r\n * @property {Object|false} [fastPreview=false] - Special mode for interactivity after loading only a part of the pictures\r\n * @property {Array<string>} [fastPreview.images] - images urls for fastPreview mode (<b>Required</b> if fastPreview is enabled)\r\n * @property {number} [fastPreview.fpsAfter] - fps value that will be applied after the full list of images is loaded\r\n * @property {function(number):number} [fastPreview.matchFrame] - A function that takes the frame number of the short set\r\n * and returns the frame number of the full set, to prevent jump after full load.\r\n * @property {function(AnimateImages):void} [onPreloadFinished] - Occurs when all image files have been loaded\r\n * @property {function(AnimateImages):void} [onFastPreloadFinished] - Occurs when all fastPreview mode images have been loaded\r\n * @property {function(AnimateImages):void} [onPosterLoaded] - Occurs when poster image is fully loaded\r\n * @property {function(AnimateImages):void} [onAnimationEnd] - Occurs when animation has ended\r\n * @property {function(AnimateImages, FrameInfo):void} [onBeforeFrame] - Occurs before new frame\r\n * @property {function(AnimateImages, FrameInfo):void} [onAfterFrame] - Occurs after the frame was drawn\r\n */\r\n\r\n/**\r\n * @typedef {Object} FrameInfo\r\n * @property {CanvasRenderingContext2D} context - canvas context\r\n * @property {number} width - internal canvas width\r\n * @property {number} height - internal canvas height\r\n * */\r\n"],"names":["normalizeFrameNumber","frameNumber","totalImages","Math","floor","uppercaseFirstChar","word","charAt","toUpperCase","slice","validateInitParameters","node","options","HTMLCanvasElement","TypeError","images","Array","isArray","length","preloadNumber","Number","parseInt","includes","fillMode","dragModifier","abs","defaultSettings","preload","poster","fps","loop","autoplay","reverse","ratio","undefined","draggable","inversion","touchScrollMode","pageScrollTimerDelay","responsiveAspect","fastPreview","onFastPreloadFinished","noOp","onPreloadFinished","onPosterLoaded","onAnimationEnd","onBeforeFrame","onAfterFrame","eventPrefix","ImagePreloader","constructor","settings","data","updateImagesCount","getFramesLeft","_settings","_data","_updateImagesCount","_getFramesLeft","_isPreloadFinished","_isFastPreloadFinished","_isAnyPreloadFinished","_isLoadedWithErrors","_preloadOffset","_preloadedCount","_tempImagesArray","_failedImages","_currentMode","_modes","default","event","callback","fast","_totalImages","_startLoading","round","unloadedCount","i","img","Image","onload","onerror","bind","src","_maybePreloadAll","e","progress","canvas","element","dispatchEvent","CustomEvent","detail","type","path","composedPath","push","Event","filter","el","loadedImagesArray","savedMode","plugin","pluginApi","deferredAction","fpsAfter","setOption","wasAnimating","isAnimating","framesAreInQueue","matchFrame","setFrame","currentFrame","play","Render","_context","getContext","_drawFrame","imageObject","sx","sy","sWidth","sHeight","dx","dy","dWidth","dHeight","canvasEl","context","width","height","drawImage","_clearCanvas","clearRect","image","canvasWidth","canvasHeight","imageWidth","naturalWidth","imageHeight","naturalHeight","offsetX","offsetY","minRatio","min","newWidth","newHeight","ar","ratioX","ratioY","minRation","Animation","changeFrame","_changeFrame","_stopRequested","_isAnimating","_framesQueue","_progressThreshold","_updateDuration","_play","isAnyFrameChanged","isFinite","_framesLeftToPlay","_lastUpdate","requestAnimationFrame","_stop","_getNextFrame","deltaFrames","newFrameNumber","_duration","timestamp","performance","now","isLongTaskBeforeRaf","newLastUpdate","newFrame","stop","getCurrentFrame","Poster","drawFrame","_isPosterLoaded","_loadAndShowPoster","_imageObject","_redrawPoster","DragInput","getNextFrame","_SWIPE_EVENTS","_isSwiping","_boundSwipeHandler","_pixelsCorrection","_updateThreshold","_enableDrag","forEach","value","addEventListener","_disableDrag","removeEventListener","document","style","cursor","newValue","_threshold","clientWidth","touches","_curX","pageX","clientX","_curY","pageY","clientY","cancelable","wasMoved","_prevX","_prevY","isFastPreloadFinished","isPreloadFinished","preloadImages","frame","direction","_prevDirection","pixelDiffX","swipeLength","isReverse","_lastInteractionTime","Date","getTime","r","swipeAngle","xDist","yDist","atan2","PI","preventDefault","AnimateImages","toggle","next","prev","playTo","innerPathDistance","outerPathDistance","shouldUseOuterPath","shortestPath","setReverse","playFrames","numberOfFrames","getReverse","setForward","forward","number","updateCanvas","getOption","option","console","warn","allowedOptions","getTotalImages","getRatio","isDragging","isLoadedWithErrors","reset","destroy","dpr","window","devicePixelRatio","toFixed","mainSide","clientMainSide","secondarySide","clientSecondarySide","initialClientMainSide","rawNewValue","clientHeight","secondaryValueDifference","newRatio","enable","add"],"mappings":"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"}